// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  roles         Role[]
}

model Role {
  id      String  @id @default(cuid())
  name    String
  users   User[]
  rules   Rule[]
  isAdmin Boolean @default(false)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  roleAccessPages RoleAccessPage[]

  @@unique([name, projectId])
}

model Rule {
  id     String @id @default(cuid())
  regex  String
  roleID String
  role   Role   @relation(fields: [roleID], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String   @default("")
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  home        String
  pages       Page[]
  tables      Table[]

  roles Role[]

  @@index([ownerId])
}

model Page {
  id         String           @id @default(cuid())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  name       String
  path       String
  variables  String           @default("{}")
  dashboards Json
  projectId  String
  public     Boolean          @default(false)
  canView    RoleAccessPage[]
  project    Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model RoleAccessPage {
  id     String @id @default(cuid())
  pageId String
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([pageId, roleId])
}

model Table {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columns   Column[]
  rows      Row[]

  @@unique([name, projectId])
}

model Column {
  id         String  @id @default(cuid())
  key        String
  type       String
  isRequired Boolean @default(false)
  isPrimary  Boolean @default(false)
  isUnique   Boolean @default(false)
  tableId    String
  table      Table   @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells      Cell[]
}

model Row {
  id      String @id @default(cuid())
  tableId String
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells   Cell[]
}

model Cell {
  id       String @id @default(cuid())
  value    String
  columnId String
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  rowId    String
  row      Row    @relation(fields: [rowId], references: [id], onDelete: Cascade)
}
