import { Header } from "@/components/header";
import { ViewList } from "@/components/view-list";
import { Layout } from "@/layout";
import { api } from "@/utils/api";
import { PageSchema, type Page } from "@/data/page";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { PageList } from "@/components/page-list";
import { Tabs } from "@/components/tabs";
import { PageMode } from "@/data/state";
import { useEffect, useState } from "react";
import { GUIEditor, IDE, Preview } from "@/components/editor";
import { deepEqual } from "@/utils/deep-equal";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

dayjs.extend(relativeTime);

type TableRoutes = {
  project: string;
  table: string;
};

export enum EditorStatus {
  INVALID_JSON = "invalid json",
  INVALID_PAGE = "invalid page",
  CHANGED = "changed",
  SAVED = "saved",
  AUTOSAVED = "auto saved",
}

function statusToCSS(status: EditorStatus): string {
  switch (status) {
    case EditorStatus.INVALID_JSON:
    case EditorStatus.INVALID_PAGE:
      return "bg-red-500 text-red-950";
    case EditorStatus.CHANGED:
      return "bg-green-500 text-green-950";
    case EditorStatus.SAVED:
    case EditorStatus.AUTOSAVED:
      return "bg-blue-500 text-blue-950";
    default:
      return "bg-slate-500 text-slate-950";
  }
}

export default function Page() {
  const router = useRouter();
  const { data: sessionData } = useSession();
  const { project: projectName, table: tableName } =
    router.query as TableRoutes;

  const [pageMode, setPageMode] = useState<PageMode>(PageMode.Preview);
  const {
    data: table,
    error,
    isError,
    isLoading,
  } = api.projects.getTableOfProject.useQuery({
    projectName,
    tableName,
  });

  const [status, setStatus] = useState<EditorStatus>(EditorStatus.SAVED);

  const ctx = api.useContext();

  // const { mutate, isLoading: isSaving } =
  //   api.projects.updatePageOfProject.useMutation({
  //     onSuccess: () => {
  //       void ctx.projects.getPageOfProject.invalidate({
  //         projectName,
  //         pagePath,
  //       });
  //     },
  //   });

  if (!projectName || !tableName) return <div>invalid path</div>;
  if (!sessionData) return <div>not logged in</div>;
  if (isError) return <div>{error.message}</div>;
  if (isLoading || !table) return <div>loading</div>;

  // const { page, updatedAt } = pageWithMeta;

  return (
    <>
      <Head>
        <title>{table.name}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout
        header={
          <Header
            item={
              <div className="flex flex-row items-center">
                <div>
                  {projectName} ðŸ‘‰ {table.name}
                </div>
                <button
                  disabled={false}
                  // onClick={() => trySaveToDatabase()}
                  className={
                    "mx-3 rounded-md  px-1 font-mono " + statusToCSS(status)
                  }
                >
                  {status}
                </button>
                <div className="text-sm text-slate-400">
                  {/* last saved {dayjs(updatedAt).fromNow()} */}
                </div>
              </div>
            }
            user={sessionData.user}
          />
        }
        sidebarLeft={
          <div className="flex h-full flex-col bg-slate-700">
            <div className="flex h-full flex-row">
              <ViewList activeView={"pages"} projectName={projectName} />
              <div className="flex h-full w-full flex-col justify-between bg-slate-700">
                {/* <PageList projectName={projectName} pagePath={pagePath} /> */}
              </div>
            </div>
            {/* <StatusBar /> */}
          </div>
        }
        content={
          <div>
            <TableView table={table} />
          </div>
        }
      />
    </>
  );
}

import { type Table } from "@/data/table";

type TableViewProperties = {
  table: Table;
};

// eslint-disable-next-line max-lines-per-function
export const TableView: React.FC<TableViewProperties> = ({ table }) => {
  return (
    <div className="">
      {/* <h1 className="text-2xl font-bold">{table.name}</h1> */}

      <div className="max-h-full overflow-x-auto shadow-md sm:rounded-lg">
        <table className="w-full text-left text-sm text-slate-500 ">
          <thead className="sticky top-0 bg-slate-50 text-xs uppercase text-slate-700">
            <tr>
              {table.columns.map((column) => (
                <th
                  key={column.key}
                  scope="col"
                  className="px-6 py-3 font-medium tracking-wider"
                >
                  {column.key}
                </th>
              ))}
            </tr>
          </thead>
          <tbody className="overflow-y-auto">
            {table.rows.map((row, index) => (
              <tr key={index} className="border-b bg-white hover:bg-slate-50 ">
                {table.columns.map((column) => (
                  <td key={column.key} className="px-6 py-4">
                    {row[column.key].toString()}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};
