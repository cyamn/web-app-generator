import { Header } from "@/components/header";
import { ViewList } from "@/components/view-list";
import { Layout } from "@/layout";
import { api } from "@/utils/api";
import { PageSchema, type Page } from "@/data/page";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { PageList } from "@/components/page-list";
import { Tabs } from "@/components/tabs";
import { PageMode } from "@/data/state";
import { useEffect, useState } from "react";
import { GUIEditor, IDE, Preview } from "@/components/editor";
import { deepEqual } from "@/utils/deep-equal";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

dayjs.extend(relativeTime);

type PageRoutes = {
  project: string;
  page: string;
};

export enum EditorStatus {
  INVALID_JSON = "invalid json",
  INVALID_PAGE = "invalid page",
  CHANGED = "changed",
  SAVED = "saved",
  AUTOSAVED = "auto saved",
}

function statusToCSS(status: EditorStatus): string {
  switch (status) {
    case EditorStatus.INVALID_JSON:
    case EditorStatus.INVALID_PAGE:
      return "bg-red-500 text-red-950";
    case EditorStatus.CHANGED:
      return "bg-green-500 text-green-950";
    case EditorStatus.SAVED:
    case EditorStatus.AUTOSAVED:
      return "bg-blue-500 text-blue-950";
    default:
      return "bg-slate-500 text-slate-950";
  }
}

export default function Page() {
  const router = useRouter();
  const { data: sessionData } = useSession();
  const { project: projectName, page: pagePath } = router.query as PageRoutes;

  const [pageMode, setPageMode] = useState<PageMode>(PageMode.Preview);
  const {
    data: pageWithMeta,
    error,
    isError,
    isLoading,
  } = api.pages.get.useQuery({
    projectName,
    pagePath,
  });

  const [localPage, setLocalPage] = useState<Page | null | undefined>(
    pageWithMeta?.page
  );
  useEffect(() => {
    setLocalPage(pageWithMeta?.page);
  }, [pageWithMeta]);

  const [status, setStatus] = useState<EditorStatus>(EditorStatus.SAVED);

  const ctx = api.useContext();

  const { mutate, isLoading: isSaving } = api.pages.update.useMutation({
    onSuccess: () => {
      void ctx.pages.get.invalidate({
        projectName,
        pagePath,
      });
    },
  });

  if (!projectName || !pagePath) return <div>invalid path</div>;
  if (!sessionData) return <div>not logged in</div>;
  if (isError) return <div>{error.message}</div>;
  if (isLoading || !pageWithMeta || !localPage) return <div>loading</div>;

  const { page, updatedAt } = pageWithMeta;

  function trySetLocalPageFromString(pageString: string): void {
    let parsed: unknown;
    try {
      parsed = JSON.parse(pageString);
    } catch (e) {
      setStatus(EditorStatus.INVALID_JSON);
      return;
    }
    const verify = PageSchema.safeParse(parsed);
    if (!verify.success) {
      setStatus(EditorStatus.INVALID_PAGE);
      console.log(verify.error);
      return;
    }
    setLocalPage(verify.data);
    if (deepEqual(verify.data, page)) setStatus(EditorStatus.SAVED);
    else setStatus(EditorStatus.CHANGED);
  }

  function wrapSetLocalPage(updatedPage: Page): void {
    setLocalPage(updatedPage);
    if (deepEqual(updatedPage, page)) setStatus(EditorStatus.SAVED);
    else setStatus(EditorStatus.CHANGED);
  }

  function trySaveToDatabase() {
    if (status !== EditorStatus.CHANGED) return;
    if (!localPage) return;
    mutate({ projectName, pagePath, page: localPage });
    setStatus(EditorStatus.SAVED);
  }

  function tryAutoSaveToDatabase() {
    if (status !== EditorStatus.CHANGED) return;
    if (!localPage) return;
    mutate({ projectName, pagePath, page: localPage });
    setStatus(EditorStatus.AUTOSAVED);
  }

  return (
    <>
      <Head>
        <title>{page.name}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout
        header={
          <Header
            item={
              <div className="flex flex-row items-center">
                <div>
                  {projectName} ðŸ‘‰ {page.name}
                </div>
                <button
                  disabled={isSaving}
                  onClick={() => trySaveToDatabase()}
                  className={
                    "mx-3 rounded-md  px-1 font-mono " + statusToCSS(status)
                  }
                >
                  {status}
                </button>
                <div className="text-sm text-slate-400">
                  last saved {dayjs(updatedAt).fromNow()}
                </div>
              </div>
            }
            user={sessionData.user}
            tabs={<Tabs pageMode={pageMode} setPageMode={setPageMode} />}
          />
        }
        sidebarLeft={
          <div className="flex h-full flex-col bg-slate-700">
            <div className="flex h-full flex-row">
              <ViewList activeView={"pages"} projectName={projectName} />
              <div className="flex h-full w-full flex-col justify-between bg-slate-700">
                <PageList projectName={projectName} pagePath={pagePath} />
              </div>
            </div>
            {/* <StatusBar /> */}
          </div>
        }
        content={
          <Content
            page={localPage}
            pageMode={pageMode}
            trySetLocalPageFromString={trySetLocalPageFromString}
            setLocalPage={wrapSetLocalPage}
            tryAutoSaveToDatabase={tryAutoSaveToDatabase}
          />
        }
      />
    </>
  );
}

type ContentProps = {
  page: Page;
  pageMode: PageMode;
  trySetLocalPageFromString: (pageString: string) => void;
  setLocalPage: (page: Page) => void;
  tryAutoSaveToDatabase: () => void;
};

function Content({
  page,
  pageMode,
  trySetLocalPageFromString,
  setLocalPage,
  tryAutoSaveToDatabase,
}: ContentProps) {
  switch (pageMode) {
    case PageMode.Edit:
      return (
        <GUIEditor
          page={page}
          setLocalPage={setLocalPage}
          tryAutoSaveToDatabase={tryAutoSaveToDatabase}
        />
      );
    case PageMode.Preview:
      return <Preview page={page} />;
    case PageMode.JSON:
      return (
        <IDE
          page={page}
          trySetLocalPageFromString={trySetLocalPageFromString}
        />
      );

    default:
      return null;
  }
}
