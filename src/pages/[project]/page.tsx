import { faFile } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useSession } from "next-auth/react";

import { Preview } from "@/components/editor/panels";
import { Header } from "@/components/header";
import { PageList } from "@/components/page-list";
import { ViewList } from "@/components/view-list";
import { type Page } from "@/data/page";
import { Layout } from "@/layout";
import { api } from "@/utils/api";

dayjs.extend(relativeTime);

const Page: NextPage = () => {
  const router = useRouter();
  const { data: sessionData } = useSession();
  const { project: projectName } = router.query as { project: string };

  if (!sessionData) return <div>not logged in</div>;

  return (
    <>
      <Head>
        <title>{projectName}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout
        header={
          <Header
            item={
              <div className="flex flex-row items-center">{projectName}</div>
            }
            user={sessionData.user}
          />
        }
        sidebarLeft={
          <div className="flex h-full flex-col bg-slate-700">
            <div className="flex h-full flex-row">
              <ViewList activeView={"pages"} projectName={projectName} />
              <div className="flex h-full w-full flex-col justify-between bg-slate-700">
                <PageList projectName={projectName} />
              </div>
            </div>
            {/* <StatusBar /> */}
          </div>
        }
        content={<PagesOverview projectName={projectName} />}
      />
    </>
  );
};

type PagesOverviewProperties = {
  projectName: string;
};

const PagesOverview: React.FC<PagesOverviewProperties> = ({ projectName }) => {
  const {
    data: pagesWithMeta,
    error,
    isError,
    isLoading,
  } = api.pages.getAll.useQuery(projectName);

  const context = api.useContext();
  const { mutate, isLoading: isCreating } = api.pages.add.useMutation({
    onSuccess: () => {
      void context.pages.listAll.invalidate(projectName);
      void context.pages.getAll.invalidate(projectName);
    },
  });

  if (isError) return <div>{error.message}</div>;
  if (isLoading) return <div>loading...</div>;

  const addPage = (): void => {
    const pageName = prompt("Please enter your page name:", "my new page");
    if (pageName === null) return;
    mutate({ projectName, pageName });
  };

  return (
    <>
      <h1 className="p-3 text-center">All Pages in {projectName}</h1>
      <div className="grid grid-cols-3 px-20">
        {pagesWithMeta.map((pageWithMeta) => (
          <PageDetailedItem
            updatedAt={pageWithMeta.updatedAt}
            key={pageWithMeta.page.name}
            page={pageWithMeta.page}
            projectName={projectName}
          />
        ))}
        <div className="m-2">
          <button
            disabled={isCreating}
            onClick={addPage}
            className="mt-6 flex h-64 w-full flex-row items-center justify-center rounded-lg bg-slate-400 p-2 text-slate-100 hover:bg-slate-500"
          >
            <h1>{isCreating ? "creating..." : "+ Add Page"}</h1>
          </button>
        </div>
      </div>
    </>
  );
};

interface PageDetailedItemProperties {
  page: Page;
  projectName: string;
  updatedAt: Date;
}

export const PageDetailedItem: React.FC<PageDetailedItemProperties> = ({
  page,
  projectName,
  updatedAt,
}) => {
  return (
    <Link href={`/${projectName}/page/${page.path}`}>
      <div className="m-2">
        <div className="grid w-full grid-cols-2">
          <div>
            <FontAwesomeIcon icon={faFile} className="mx-2" />
            {page.name}: ({page.path}){" "}
          </div>
          <div className="pr-2 text-right text-slate-400">
            {dayjs(updatedAt).fromNow()}
          </div>
        </div>
        <div className="h-64 overflow-scroll overflow-x-hidden rounded-lg  border border-slate-300 bg-white hover:shadow-2xl">
          <div className="col-span-6">
            <div className="-translate-x-1/4 -translate-y-1/4  scale-50">
              <div className="h-[200%] w-[200%]">
                <Preview page={page} />
              </div>
            </div>
          </div>
        </div>
      </div>
    </Link>
  );
};

export default Page;
